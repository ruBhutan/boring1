
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password'
};

exports.Prisma.TourScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  duration: 'duration',
  price: 'price',
  maxPrice: 'maxPrice',
  categoryName: 'categoryName',
  difficulty: 'difficulty',
  groupSize: 'groupSize',
  imageUrl: 'imageUrl',
  highlights: 'highlights',
  includes: 'includes',
  excludes: 'excludes',
  itinerary: 'itinerary',
  bestTime: 'bestTime',
  physicalRating: 'physicalRating',
  culturalLevel: 'culturalLevel',
  luxuryLevel: 'luxuryLevel',
  spiritualLevel: 'spiritualLevel',
  rating: 'rating',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tourOperatorId: 'tourOperatorId'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  tourId: 'tourId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  travelDate: 'travelDate',
  groupSize: 'groupSize',
  specialRequests: 'specialRequests',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.InquiryScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  tourInterest: 'tourInterest',
  preferredDates: 'preferredDates',
  groupSize: 'groupSize',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.TestimonialScalarFieldEnum = {
  id: 'id',
  name: 'name',
  country: 'country',
  imageUrl: 'imageUrl',
  text: 'text',
  rating: 'rating',
  tripName: 'tripName',
  duration: 'duration',
  isActive: 'isActive'
};

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  excerpt: 'excerpt',
  content: 'content',
  imageUrl: 'imageUrl',
  category: 'category',
  author: 'author',
  authorImage: 'authorImage',
  readTime: 'readTime',
  publishedAt: 'publishedAt',
  isPublished: 'isPublished'
};

exports.Prisma.GuideScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  licenseImageUrl: 'licenseImageUrl',
  registrationType: 'registrationType',
  specializations: 'specializations',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ItineraryScalarFieldEnum = {
  id: 'id',
  tourId: 'tourId',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  guideId: 'guideId',
  driverId: 'driverId',
  maxParticipants: 'maxParticipants',
  currentParticipants: 'currentParticipants',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ItineraryDayScalarFieldEnum = {
  id: 'id',
  itineraryId: 'itineraryId',
  dayNumber: 'dayNumber',
  title: 'title',
  description: 'description',
  activities: 'activities',
  accommodation: 'accommodation',
  meals: 'meals',
  transportation: 'transportation',
  notes: 'notes'
};

exports.Prisma.CustomTourRequestScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  duration: 'duration',
  groupSize: 'groupSize',
  budget: 'budget',
  preferredDates: 'preferredDates',
  specialRequirements: 'specialRequirements',
  destinations: 'destinations',
  accommodationType: 'accommodationType',
  transportPreference: 'transportPreference',
  status: 'status',
  adminNotes: 'adminNotes',
  estimatedPrice: 'estimatedPrice',
  assignedItineraryId: 'assignedItineraryId',
  createdAt: 'createdAt'
};

exports.Prisma.TourOperatorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  website: 'website',
  description: 'description',
  bestFeature: 'bestFeature',
  specialties: 'specialties',
  rating: 'rating',
  reviewCount: 'reviewCount',
  logoUrl: 'logoUrl',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  isActive: 'isActive',
  establishedYear: 'establishedYear',
  certifications: 'certifications',
  awards: 'awards',
  createdAt: 'createdAt'
};

exports.Prisma.FestivalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  location: 'location',
  dates: 'dates',
  duration: 'duration',
  significance: 'significance',
  activities: 'activities',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FestivalBookingScalarFieldEnum = {
  id: 'id',
  festivalId: 'festivalId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  numberOfTickets: 'numberOfTickets',
  totalAmount: 'totalAmount',
  specialRequests: 'specialRequests',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.HotelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  location: 'location',
  address: 'address',
  imageUrl: 'imageUrl',
  images: 'images',
  categoryId: 'categoryId',
  starRating: 'starRating',
  amenities: 'amenities',
  features: 'features',
  pricePerNight: 'pricePerNight',
  isActive: 'isActive',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  website: 'website',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  cancellationPolicy: 'cancellationPolicy',
  createdAt: 'createdAt'
};

exports.Prisma.HotelRoomScalarFieldEnum = {
  id: 'id',
  hotelId: 'hotelId',
  roomType: 'roomType',
  roomName: 'roomName',
  description: 'description',
  imageUrl: 'imageUrl',
  images: 'images',
  maxOccupancy: 'maxOccupancy',
  bedType: 'bedType',
  roomSize: 'roomSize',
  amenities: 'amenities',
  pricePerNight: 'pricePerNight',
  totalRooms: 'totalRooms',
  isActive: 'isActive'
};

exports.Prisma.HotelBookingScalarFieldEnum = {
  id: 'id',
  hotelId: 'hotelId',
  roomId: 'roomId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  checkInDate: 'checkInDate',
  checkOutDate: 'checkOutDate',
  numberOfRooms: 'numberOfRooms',
  numberOfGuests: 'numberOfGuests',
  totalAmount: 'totalAmount',
  specialRequests: 'specialRequests',
  status: 'status',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt'
};

exports.Prisma.UserAccountScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  role: 'role',
  isActive: 'isActive',
  profileImage: 'profileImage',
  createdAt: 'createdAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.UserFeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itineraryId: 'itineraryId',
  tourId: 'tourId',
  rating: 'rating',
  comment: 'comment',
  category: 'category',
  isPublic: 'isPublic',
  createdAt: 'createdAt'
};

exports.Prisma.TourCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  description: 'description',
  isActive: 'isActive',
  displayOrder: 'displayOrder'
};

exports.Prisma.HotelCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  description: 'description',
  isActive: 'isActive',
  displayOrder: 'displayOrder'
};

exports.Prisma.TravelActivityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  difficulty: 'difficulty',
  isActive: 'isActive',
  displayOrder: 'displayOrder'
};

exports.Prisma.TravelInterestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  displayOrder: 'displayOrder'
};

exports.Prisma.FlightRouteScalarFieldEnum = {
  id: 'id',
  origin: 'origin',
  destination: 'destination',
  airline: 'airline',
  duration: 'duration',
  frequency: 'frequency',
  price: 'price',
  isActive: 'isActive'
};

exports.Prisma.AccommodationTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  isActive: 'isActive'
};

exports.Prisma.DifficultyLevelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive'
};

exports.Prisma.SeasonalPeriodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  weather: 'weather',
  isActive: 'isActive'
};

exports.Prisma.BookingActivityScalarFieldEnum = {
  bookingId: 'bookingId',
  activityId: 'activityId'
};

exports.Prisma.UserInterestScalarFieldEnum = {
  userId: 'userId',
  interestId: 'interestId'
};

exports.Prisma.CustomTourInterestScalarFieldEnum = {
  customTourRequestId: 'customTourRequestId',
  interestId: 'interestId'
};

exports.Prisma.FlightBookingScalarFieldEnum = {
  id: 'id',
  flightRouteId: 'flightRouteId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  departureDate: 'departureDate',
  returnDate: 'returnDate',
  numberOfPassengers: 'numberOfPassengers',
  totalAmount: 'totalAmount',
  specialRequests: 'specialRequests',
  status: 'status',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  duration: 'duration',
  difficulty: 'difficulty',
  price: 'price',
  description: 'description',
  location: 'location',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourActivityJunctionScalarFieldEnum = {
  tourId: 'tourId',
  activityId: 'activityId',
  included: 'included',
  optional: 'optional'
};

exports.Prisma.InterestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  experiences: 'experiences',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FlightScalarFieldEnum = {
  id: 'id',
  airline: 'airline',
  route: 'route',
  duration: 'duration',
  frequency: 'frequency',
  price: 'price',
  aircraft: 'aircraft',
  features: 'features',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourFestivalScalarFieldEnum = {
  id: 'id',
  tourId: 'tourId',
  festivalId: 'festivalId'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  userEmail: 'userEmail',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  sender: 'sender',
  message: 'message',
  messageType: 'messageType',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userEmail: 'userEmail',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  priority: 'priority',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  hotelBookingId: 'hotelBookingId',
  flightBookingId: 'flightBookingId',
  amount: 'amount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  paymentGateway: 'paymentGateway',
  transactionId: 'transactionId',
  status: 'status',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Tour: 'Tour',
  Booking: 'Booking',
  Inquiry: 'Inquiry',
  Testimonial: 'Testimonial',
  BlogPost: 'BlogPost',
  Guide: 'Guide',
  Itinerary: 'Itinerary',
  ItineraryDay: 'ItineraryDay',
  CustomTourRequest: 'CustomTourRequest',
  TourOperator: 'TourOperator',
  Festival: 'Festival',
  FestivalBooking: 'FestivalBooking',
  Hotel: 'Hotel',
  HotelRoom: 'HotelRoom',
  HotelBooking: 'HotelBooking',
  UserAccount: 'UserAccount',
  UserFeedback: 'UserFeedback',
  TourCategory: 'TourCategory',
  HotelCategory: 'HotelCategory',
  TravelActivity: 'TravelActivity',
  TravelInterest: 'TravelInterest',
  FlightRoute: 'FlightRoute',
  AccommodationType: 'AccommodationType',
  DifficultyLevel: 'DifficultyLevel',
  SeasonalPeriod: 'SeasonalPeriod',
  BookingActivity: 'BookingActivity',
  UserInterest: 'UserInterest',
  CustomTourInterest: 'CustomTourInterest',
  FlightBooking: 'FlightBooking',
  Activity: 'Activity',
  TourActivityJunction: 'TourActivityJunction',
  Interest: 'Interest',
  Flight: 'Flight',
  TourFestival: 'TourFestival',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  Notification: 'Notification',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
